/**
 * @Author       : gainovel
 * @Organization : Copyright © 2023-2024 gainovel.com All Rights Reserved.
 * @Date         : 2024-03-13 10:44:15 星期三
 * @ProductName  : GoLand
 * @PrjectName   : test-case
 * @File         : stdlib/runtime/select/features_and_usages/comprehensive/001_test.go
 * @Version      : v0.1.0
 * @Description  : 开发中···
 **/

// qmemcodestart
package comprehensive

import (
	"fmt"
	"testing"
	"time"

	selecttools "github.com/gainovel/testcase/stdlib/runtime/select/tools"
	commonprint "github.com/gainovel/testcase/tools/common/print"
)

var (
	myfmt = commonprint.MyFmt
)

func TestName_2024_03_13_10_44_15(t *testing.T) {
	// select的case语句基本特点
	// go test -v -run TestName_2024_03_13_10_44_15/case1 github.com/gainovel/testcase/stdlib/runtime/select/features_and_usages/comprehensive
	t.Run("case1", func(t *testing.T) {
		var (
			ch1 chan int
			ch2 chan int
		)
		ch1 = make(chan int, 2)
		ch2 = make(chan int)
		myfmt.VarInitPrintln(`		var (
			ch1 chan int
			ch2 chan int
		)
		ch1 = make(chan int, 2)
		ch2 = make(chan int)`)
		myfmt.ColorDescPrintln("go tools.SendToIntChan(ch2)", `func SendToIntChanNTimes(ch chan int, n int) {
	for i := 0; i < n; i++ {
		ch <- i
		time.Sleep(time.Second)
	}
}`)
		go selecttools.SendToIntChanNTimes(ch2, 3)
	label1:
		for {
			select {
			case ch1 <- 1:
				myfmt.ColorDescPrintln("进入case ch1 <- 1")
				myfmt.KeyValuePrintln("len(ch1)", len(ch1), "cap(ch1)", cap(ch1))
				val, ok := <-ch1
				myfmt.ColorDescPrintln("val, ok := <-ch1")
				myfmt.KeyValuePrintln("len(ch1)", len(ch1), "cap(ch1)", cap(ch1), "val", val, "ok", ok)
				time.Sleep(time.Second)
			case val, ok := <-ch2:
				myfmt.ColorDescPrintln("进入case val, ok := <-ch2")
				myfmt.KeyValuePrintln("len(ch2)", len(ch2), "cap(ch2)", cap(ch2), "val", val, "ok", ok)
				if val == 2 {
					break label1
				}
				time.Sleep(time.Second)
			default:
				fmt.Println("进入case default")
			}
		}
	})
	t.Run("read block", func(t *testing.T) {
		var (
			ch1 chan int
		)
		ch1 = make(chan int, 2)
		// 如果没有一个goroutine在运行，go进程会停止，
		// 所以这里放一个sleep goroutine
		go selecttools.SleepGoroutineNMinute(5)
		// ch1缓冲区无数据，select会阻塞
		select {
		case <-ch1:
			myfmt.ColorDescPrintln("进入 case <-ch1")
		}
	})
}

// qmemcodeend

// qmemoutputstart
//**************************************************************************************
//* 测试用例运行方法：
//*  0.前置要求：安装go（version>=1.20），安装make（可选）
//*  1.git clone git@gitee.com:gainovel/go-test-case.git 👉 cd go-test-case
//*    👉 cd docs/tests/stdlib/runtime/select.md
//*    👉 找到对应的命令依次复制执行即可（在根目录（go-test-case）下执行命令）
//*  2.或者直接打开测试文件 stdlib/runtime/select/features_and_usages/comprehensive/001.go，
//*    每个子测试上都有对应的命令，直接执行即可（在根目录（go-test-case）下执行命令）
//*  3. ❗ 注意：所有命令都在根目录下执行
//**************************************************************************************
//
//🏳️‍🌈
//**************************************************************************************
//*  Test Command: make TestName_2024_03_13_10_44_15/case1 -f Makefiles/stdlib/runtime/select.mk
//*  Test Result:
//*  👇
//*  变量初始化：
//*  --------------------------------------------------------------------------------
//*                  var (
//*                          ch1 chan int
//*                          ch2 chan int
//*                  )
//*                  ch1 = make(chan int, 2)
//*                  ch2 = make(chan int)
//*  --------------------------------------------------------------------------------
//*  👇
//*  go tools.SendToIntChan(ch2)
//*  func SendToIntChanNTimes(ch chan int, n int) {
//*          for i := 0; i < n; i++ {
//*                  ch <- i
//*                  time.Sleep(time.Second)
//*          }
//*  }
//*  👇
//*  进入case ch1 <- 1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 1
//*  |          cap(ch1) | 2
//*  --------------------------------------------------------------------------------
//*  👇
//*  val, ok := <-ch1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 0
//*  |          cap(ch1) | 2
//*  |               val | 1
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//*  👇
//*  进入case val, ok := <-ch2
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch2) | 0
//*  |          cap(ch2) | 0
//*  |               val | 0
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//*  👇
//*  进入case ch1 <- 1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 1
//*  |          cap(ch1) | 2
//*  --------------------------------------------------------------------------------
//*  👇
//*  val, ok := <-ch1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 0
//*  |          cap(ch1) | 2
//*  |               val | 1
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//*  👇
//*  进入case val, ok := <-ch2
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch2) | 0
//*  |          cap(ch2) | 0
//*  |               val | 1
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//*  👇
//*  进入case ch1 <- 1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 1
//*  |          cap(ch1) | 2
//*  --------------------------------------------------------------------------------
//*  👇
//*  val, ok := <-ch1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 0
//*  |          cap(ch1) | 2
//*  |               val | 1
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//*  👇
//*  进入case ch1 <- 1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 1
//*  |          cap(ch1) | 2
//*  --------------------------------------------------------------------------------
//*  👇
//*  val, ok := <-ch1
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch1) | 0
//*  |          cap(ch1) | 2
//*  |               val | 1
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//*  👇
//*  进入case val, ok := <-ch2
//*  --------------------------------------------------------------------------------
//*  |               key | value
//*  --------------------------------------------------------------------------------
//*  |          len(ch2) | 0
//*  |          cap(ch2) | 0
//*  |               val | 2
//*  |                ok | true
//*  --------------------------------------------------------------------------------
//**************************************************************************************
//
//🏳️‍🌈
//**************************************************************************************
//*  Test Command: xxx
//*  Test Result:
//*
//**************************************************************************************
//
//🏳️‍🌈
//**************************************************************************************
//*  Test Command: xxx
//*  Test Result:
//*
//**************************************************************************************
//
//🏳️‍🌈
//**************************************************************************************
//*  Test Command: xxx
//*  Test Result:
//*
//**************************************************************************************
//
// qmemoutputend
